import { useState, useEffect, useRef } from 'react';
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Users, Send, ChevronLeft } from "lucide-react";
import { useLocation } from "wouter";
import logoUrl from '@/assets/logo.png';
import { useAuth } from '@/contexts/AuthContext';
import { useChat } from '@/contexts/ChatContext';

// Array of Brazilian names for generating messages
const brazilianNames = [
  "Marcelo Rocha", "Ana Silva", "Pedro Santos", "Julia Costa", "Lucas Oliveira",
  "Mariana Lima", "Gabriel Souza", "Beatriz Almeida", "Rafael Pereira", "Larissa Ferreira",
  "Bruno Rodrigues", "Camila Martins", "Thiago Gomes", "Amanda Ribeiro", "Jo√£o Paulo",
  "Isabella Cardoso", "Daniel Nascimento", "Sophia Vieira", "Matheus Barbosa", "Leticia Dias",
  "Carlos Alberto", "Patricia Mendes", "Fernando Cruz", "Vanessa Lopes", "Ricardo Ara√∫jo",
  "Juliana Castro", "Andr√© Silva", "Monica Santos", "Roberto Carlos", "Tatiana Ramos",
  "Marcos Paulo", "Aline Souza", "Eduardo Lima", "Fernanda Costa", "Gustavo Henrique",
  "Carolina Machado", "Leonardo Silva", "Priscila Oliveira", "Diego Fernandes", "Natalia Alves",
  "Paulo Roberto", "Sandra Regina", "Jos√© Carlos", "Maria Clara", "Antonio Silva",
  "Bruna Rodrigues", "Felipe Costa", "Renata Souza", "Vinicius Lima", "Jessica Santos",
  "Rodrigo Almeida", "Cristina Ferreira", "Alexandre Martins", "Laura Beatriz", "Caio C√©sar",
  "Michele Oliveira", "Fabio Santos", "Sabrina Costa", "Wellington Silva", "Bianca Lima",
  "Sergio Mendes", "Adriana Paula", "Marcio Roberto", "Elaine Cristina", "Luciano Santos",
  "Raquel Silva", "Alan Costa", "Carla Souza", "Renan Lima", "Viviane Oliveira",
  "Claudio Santos", "Rosana Costa", "Henrique Silva", "Debora Lima", "Wagner Souza",
  "Luciana Ferreira", "Igor Santos", "Simone Costa", "Danilo Silva", "Kelly Oliveira",
  "Francisco Jos√©", "Regina Maria", "Renato Carlos", "Elisa Santos", "Bruno C√©sar"
];

// Generate 300+ message variations
const messageTemplates = [
  // Greetings (20)
  "Oi", "opa", "opa pessoal!", "Ol√° galera", "Bom dia", "Boa tarde", "Boa noite",
  "E a√≠ pessoal", "Fala galera", "Oi gente", "Salve salve", "Ol√° a todos",
  "Opa, tudo bem?", "E a√≠, como t√°?", "Bom dia fam√≠lia", "Boa tarde galera",
  "Fala a√≠", "Beleza?", "Tudo certo?", "Oi pessoal!",
  
  // Questions about functionality (30)
  "realmente funciona?", "√© gente real aqui?", "algu√©m j√° sacou mesmo?",
  "isso √© verdade?", "quanto tempo demora pra sacar?", "√© confi√°vel?",
  "algu√©m pode confirmar?", "funciona mesmo?", "√© seguro?",
  "qual o valor m√≠nimo?", "como fa√ßo pra sacar?", "precisa de documento?",
  "tem alguma pegadinha?", "√© r√°pido o saque?", "cai na hora?",
  "qual banco aceita?", "funciona com Nubank?", "aceita PIX?",
  "tem taxa?", "cobra alguma coisa?", "√© de gra√ßa mesmo?",
  "quantos pontos precisa?", "como ganho mais r√°pido?", "tem limite di√°rio?",
  "posso sacar todo dia?", "tem hor√°rio espec√≠fico?", "funciona fim de semana?",
  "algu√©m me ajuda?", "como come√ßar?", "√© dif√≠cil?",
  
  // Success stories (40)
  "eu estou a 8 dias aqui consegui 6 saques de quase 350 caiu certinho aqui",
  "primeiro saque de 150 reais caiu em 2 minutos!",
  "j√° fiz 3 saques essa semana, todos ca√≠ram certinho",
  "consegui pagar minha conta de luz com os pontos",
  "450 reais em 10 dias, t√¥ impressionado",
  "meu primeiro saque de 200 caiu agora mesmo!",
  "j√° somei mais de 1000 reais esse m√™s",
  "caiu 300 reais agora na minha conta",
  "fiz 5 saques at√© agora, todos aprovados",
  "consegui juntar 600 reais em duas semanas",
  "paguei meu cart√£o com o dinheiro daqui",
  "j√° tirei 800 reais no total",
  "meu saque de 250 foi aprovado em 1 minuto",
  "consegui fazer 2 saques hoje",
  "juntei 400 reais s√≥ essa semana",
  "minha m√£e n√£o acreditou quando mostrei o extrato",
  "j√° paguei 3 boletos com o dinheiro daqui",
  "fiz 350 reais em 5 dias",
  "consegui comprar o presente do meu filho",
  "tirei 500 reais m√™s passado",
  "j√° s√£o 12 saques aprovados",
  "1200 reais em um m√™s, inacredit√°vel!",
  "paguei minha internet com os pontos",
  "fiz meu primeiro saque de 100 e j√° caiu",
  "300 reais em 3 dias de uso",
  "j√° tirei mais de 2000 no total",
  "comprei um celular novo com o dinheiro",
  "600 reais esse m√™s j√°",
  "meu marido ficou surpreso com o saque",
  "d√° pra fazer uma renda extra boa aqui",
  "j√° indiquei pra toda fam√≠lia",
  "melhor que muitos apps por a√≠",
  "350 reais ca√≠ram agora mesmo!",
  "consegui pagar o aluguel",
  "j√° fiz 8 saques esse m√™s",
  "tirei 200 ontem e j√° caiu hoje",
  "minha prima tamb√©m est√° ganhando",
  "450 reais em uma semana!",
  "nunca vi algo t√£o r√°pido",
  "j√° somei 1500 reais",
  
  // Confirmations (30)
  "aqui tbm caiu certinho", "ACABOU DE CAIR AQUI TBM",
  "confirmo, caiu agora", "sim, funciona mesmo",
  "verdade, j√° recebi", "pode confiar",
  "√© real sim", "caiu em 2 minutos",
  "confirmado!", "deu certo aqui",
  "aprovado na hora", "recebi agora mesmo",
  "tudo certo por aqui", "funcionou perfeitamente",
  "sem problemas aqui", "100% confi√°vel",
  "pode fazer sem medo", "√© seguro sim",
  "j√° testei e aprovo", "recomendo!",
  "vale muito a pena", "melhor app",
  "estou adorando", "muito bom mesmo",
  "excelente!", "perfeito!",
  "sem pegadinhas", "transparente",
  "r√°pido e f√°cil", "super indico",
  
  // Progress updates (30)
  "estou quase batendo meu primeiro saque de 300",
  "faltam 500 pontos pro pr√≥ximo saque",
  "j√° tenho 8000 pontos acumulados",
  "mais 2 dias e fa√ßo outro saque",
  "70% da meta di√°ria completa",
  "consegui 2000 pontos hoje",
  "batendo 10000 pontos essa semana",
  "falta pouco pra pr√≥xima retirada",
  "j√° passei dos 5000 pontos",
  "meta de hoje conclu√≠da!",
  "15000 pontos e subindo",
  "quase l√°, faltam 300 pontos",
  "80% do objetivo alcan√ßado",
  "mais uma hora e completo a meta",
  "12000 pontos acumulados",
  "pr√≥ximo saque amanh√£!",
  "consegui metade da meta",
  "3000 pontos em um dia",
  "recorde pessoal: 4000 pontos",
  "batendo todas as metas",
  "20000 pontos no total",
  "mais 1000 e fa√ßo o saque",
  "90% completo",
  "quase batendo 25000",
  "melhor dia at√© agora",
  "superando expectativas",
  "6000 pontos hoje!",
  "faltam s√≥ 100 pontos",
  "objetivo quase completo",
  "30000 pontos acumulados!",
  
  // Reactions and enthusiasm (40)
  "kkkkkk muito bom", "kkkkk n√£o acredito",
  "üòçüòçüòç", "üéâüéâüéâ", "üí∞üí∞üí∞",
  "que maravilha!", "incr√≠vel!",
  "t√¥ muito feliz", "emocionado aqui",
  "n√£o esperava isso", "surreal!",
  "melhor coisa que fiz", "valeu a pena",
  "t√¥ sem palavras", "sensacional",
  "showwww", "toppppp",
  "massa demais", "que legal!",
  "amando isso", "viciado j√° kkk",
  "n√£o consigo parar", "muito bom mesmo",
  "recomendo demais", "nota 10",
  "perfeito galera", "sem defeitos",
  "5 estrelas", "aprovad√≠ssimo",
  "mega recomendo", "fa√ßam tamb√©m",
  "n√£o percam tempo", "comecem logo",
  "melhor decis√£o", "mudou minha vida",
  "ajudando muito aqui", "salvou meu m√™s",
  "dinheiro extra sempre", "aben√ßoado üôè",
  "gratid√£o üôè", "Deus aben√ßoe",
  
  // Mixed conversations (40)
  "algu√©m online?", "como t√° o dia de vcs?",
  "boa sorte pra todos", "vamos que vamos",
  "for√ßa galera", "todo mundo ganhando",
  "sucesso pra todos", "juntos somos mais fortes",
  "comunidade top", "pessoal aqui √© show",
  "adorando o grupo", "galera ajuda muito",
  "obrigado pelas dicas", "valeu pessoal",
  "aprendi muito aqui", "dicas valiosas",
  "seguindo as orienta√ß√µes", "fazendo como ensinaram",
  "dica de ouro funciona", "testei a estrat√©gia",
  "rendimento aumentou", "melhorando cada dia",
  "evolu√ß√£o constante", "aprendendo sempre",
  "compartilhando experi√™ncia", "minha hist√≥ria aqui",
  "come√ßei ontem", "primeira semana",
  "um m√™s usando", "veterano aqui",
  "novato mas animado", "aprendendo ainda",
  "algu√©m me explica?", "preciso de ajuda",
  "como melhorar?", "alguma dica?",
  "estrat√©gia boa?", "o que recomendam?",
  "hor√°rio bom?", "quando √© melhor?",
  "final de semana rende?", "feriado funciona?",
  "madrugada vale a pena?", "manh√£ √© melhor?",
  
  // Specific amounts and transactions (40)
  "R$ 50 na conta", "R$ 100 aprovado",
  "R$ 150 caiu agora", "R$ 200 confirmado",
  "R$ 250 recebido", "R$ 300 no PIX",
  "R$ 350 transferido", "R$ 400 na carteira",
  "R$ 450 sacado", "R$ 500 liberado",
  "saque de R$ 75", "retirada de R$ 125",
  "ganho de R$ 175", "lucro de R$ 225",
  "extra de R$ 275", "b√¥nus de R$ 325",
  "pr√™mio de R$ 375", "valor de R$ 425",
  "quantia de R$ 475", "montante de R$ 525",
  "PIX de 80 reais", "transfer√™ncia de 120",
  "dep√≥sito de 180", "cr√©dito de 220",
  "entrada de 280", "recebimento de 320",
  "pagamento de 380", "valor de 420",
  "saldo de 480", "total de 520",
  "primeiro saque: 60", "segundo saque: 110",
  "terceiro saque: 160", "quarto saque: 210",
  "quinto saque: 260", "sexto saque: 310",
  "s√©timo saque: 360", "oitavo saque: 410",
  "nono saque: 460", "d√©cimo saque: 510",
  
  // Doubts and concerns (30)
  "ser√° que √© verdade?", "tenho medo de golpe",
  "algu√©m teve problema?", "√© seguro mesmo?",
  "posso confiar?", "n√£o √© scam?",
  "tem comprovante?", "mostra o extrato?",
  "prova que funciona?", "cad√™ a prova?",
  "desconfiado ainda", "t√¥ com d√∫vida",
  "explicam melhor?", "como ter certeza?",
  "garantia existe?", "e se der erro?",
  "suporte responde?", "ajuda dispon√≠vel?",
  "documenta√ß√£o necess√°ria?", "CPF obrigat√≥rio?",
  "dados protegidos?", "privacidade garantida?",
  "empresa confi√°vel?", "h√° quanto tempo existe?",
  "reclama√ß√µes resolvidas?", "atendimento bom?",
  "demora quanto?", "prazo real?",
  "taxas escondidas?", "custos extras?",
  
  // Time-related messages (30)
  "bom dia pessoal, come√ßando agora",
  "boa tarde, como est√£o?",
  "boa noite galera, ainda d√° tempo?",
  "madrugada produtiva aqui",
  "manh√£ rendendo bem",
  "tarde tranquila ganhando",
  "noite lucrativa",
  "fim de semana top",
  "segunda come√ßando bem",
  "ter√ßa produtiva",
  "quarta no lucro",
  "quinta pagando",
  "sexta aben√ßoada",
  "s√°bado de ganhos",
  "domingo tamb√©m rende",
  "feriado trabalhando aqui",
  "f√©rias ganhando dinheiro",
  "m√™s come√ßando bem",
  "semana produtiva",
  "dia excelente",
  "hora de ganhar",
  "momento perfeito",
  "agora √© a hora",
  "tempo √© dinheiro",
  "aproveitando o tempo",
  "cada minuto conta",
  "n√£o perco tempo",
  "24h ganhando",
  "sempre ativo",
  "non-stop aqui",
  
  // Motivational (30)
  "n√£o desistam!", "continuem tentando",
  "persist√™ncia √© tudo", "foco no objetivo",
  "vamos conseguir", "acreditem",
  "tudo √© poss√≠vel", "sonhos realizam",
  "mudan√ßa de vida", "futuro melhor",
  "oportunidade √∫nica", "aproveitem",
  "momento √© agora", "a√ß√£o gera resultado",
  "sucesso garantido", "vit√≥ria certa",
  "caminho certo", "dire√ß√£o correta",
  "escolha acertada", "decis√£o inteligente",
  "investimento pr√≥prio", "retorno garantido",
  "lucro certo", "ganho real",
  "benef√≠cio imediato", "vantagem clara",
  "melhoria vis√≠vel", "progresso not√°vel",
  "avan√ßo significativo", "crescimento constante",
  
  // Technical and help (20)
  "atualizem o app", "vers√£o nova saiu",
  "bug corrigido", "problema resolvido",
  "erro solucionado", "funcionando normal",
  "sistema est√°vel", "plataforma ok",
  "sem instabilidade", "tudo operacional",
  "manuten√ß√£o conclu√≠da", "melhorias implementadas",
  "novidade dispon√≠vel", "recurso novo",
  "fun√ß√£o liberada", "op√ß√£o adicional",
  "tutorial ajudou", "v√≠deo explicativo",
  "passo a passo", "guia completo"
];

export default function Chat() {
  const [, setLocation] = useLocation();
  const { user } = useAuth();
  const { messages, addMessage } = useChat();
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const lastMessageRef = useRef<HTMLDivElement>(null);
  
  // Auto-generate messages
  useEffect(() => {
    // Generate initial messages if chat is empty
    if (messages.length === 0) {
      // Add 5-8 initial messages
      const initialCount = 5 + Math.floor(Math.random() * 4);
      for (let i = 0; i < initialCount; i++) {
        setTimeout(() => {
          const randomName = brazilianNames[Math.floor(Math.random() * brazilianNames.length)];
          const randomMessage = messageTemplates[Math.floor(Math.random() * messageTemplates.length)];
          
          addMessage({
            name: randomName,
            message: randomMessage,
            isVerified: true,
            isOwnMessage: false
          });
        }, i * 500); // Stagger initial messages
      }
    }
    
    // Set up interval for new messages
    const generateRandomMessage = () => {
      // 70% chance to generate a message
      if (Math.random() < 0.7) {
        const randomName = brazilianNames[Math.floor(Math.random() * brazilianNames.length)];
        const randomMessage = messageTemplates[Math.floor(Math.random() * messageTemplates.length)];
        
        addMessage({
          name: randomName,
          message: randomMessage,
          isVerified: true,
          isOwnMessage: false
        });
        
        // Sometimes add a follow-up message from same person
        if (Math.random() < 0.2) {
          setTimeout(() => {
            const followUpMessages = [
              "esqueci de falar", "ah, e tamb√©m", "mais uma coisa",
              "detalhe importante", "pra complementar", "ali√°s"
            ];
            const followUp = followUpMessages[Math.floor(Math.random() * followUpMessages.length)];
            const followUpMessage = messageTemplates[Math.floor(Math.random() * messageTemplates.length)];
            
            addMessage({
              name: randomName,
              message: `${followUp}, ${followUpMessage}`,
              isVerified: true,
              isOwnMessage: false
            });
          }, 1000 + Math.random() * 2000);
        }
      }
    };
    
    // Random interval between 2-5 seconds
    const intervalId = setInterval(() => {
      generateRandomMessage();
    }, 2000 + Math.random() * 3000);
    
    return () => clearInterval(intervalId);
  }, [addMessage, messages.length]);
  
  // Auto scroll to bottom
  useEffect(() => {
    if (lastMessageRef.current) {
      lastMessageRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);
  
  // Handle send message
  const handleSendMessage = () => {
    if (inputMessage.trim()) {
      addMessage({
        name: user?.fullName || user?.username || 'Voc√™',
        message: inputMessage.trim(),
        isVerified: false,
        isOwnMessage: true
      });
      setInputMessage('');
      
      // Simulate someone typing and responding sometimes
      if (Math.random() < 0.3) {
        setIsTyping(true);
        setTimeout(() => {
          setIsTyping(false);
          const responses = [
            "concordo com voc√™", "boa pergunta", "tamb√©m penso assim",
            "exatamente!", "isso mesmo", "verdade", "com certeza",
            "bem observado", "faz sentido", "boa!", "üëç", "üíØ"
          ];
          const randomName = brazilianNames[Math.floor(Math.random() * brazilianNames.length)];
          const randomResponse = responses[Math.floor(Math.random() * responses.length)];
          
          addMessage({
            name: randomName,
            message: randomResponse,
            isVerified: true,
            isOwnMessage: false
          });
        }, 1500 + Math.random() * 2000);
      }
    }
  };
  
  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };
  
  // Count online users (simulate)
  const [onlineCount, setOnlineCount] = useState(287);
  useEffect(() => {
    const interval = setInterval(() => {
      setOnlineCount(prev => {
        const change = Math.floor(Math.random() * 21) - 10; // -10 to +10
        const newCount = prev + change;
        return Math.max(250, Math.min(350, newCount)); // Keep between 250-350
      });
    }, 5000);
    
    return () => clearInterval(interval);
  }, []);
  
  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="container mx-auto px-4 py-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <Button
                variant="ghost"
                size="icon"
                className="w-8 h-8"
                onClick={() => setLocation('/dashboard')}
                data-testid="button-back"
              >
                <ChevronLeft className="w-5 h-5" />
              </Button>
              <div>
                <h1 className="font-semibold text-lg">Chat da Comunidade</h1>
                <div className="flex items-center gap-1 text-xs text-gray-500">
                  <Users className="w-3 h-3" />
                  <span>{onlineCount} online</span>
                  {isTyping && (
                    <>
                      <span className="mx-1">‚Ä¢</span>
                      <span className="text-primary">algu√©m digitando...</span>
                    </>
                  )}
                </div>
              </div>
            </div>
            
            <img src={logoUrl} alt="R√°dioPlay" className="h-7 object-contain" />
          </div>
        </div>
      </header>
      
      {/* Messages Area */}
      <ScrollArea className="flex-1 px-4 py-3 bg-gray-100" ref={scrollAreaRef}>
        <div className="max-w-2xl mx-auto space-y-3">
          {messages.map((msg, index) => (
            <div
              key={msg.id}
              ref={index === messages.length - 1 ? lastMessageRef : undefined}
              className={`flex ${msg.isOwnMessage ? 'justify-end' : 'justify-start'}`}
              data-testid={`message-${msg.id}`}
            >
              <div
                className={`max-w-[80%] md:max-w-[60%] rounded-2xl px-4 py-2 shadow-sm ${
                  msg.isOwnMessage 
                    ? 'bg-primary text-white rounded-br-sm' 
                    : 'bg-white text-gray-800 rounded-bl-sm'
                }`}
              >
                <div className="text-xs opacity-75 mb-1">
                  [{msg.timestamp}] {msg.name} {msg.isVerified ? '‚úÖ' : ''}
                </div>
                <div className="text-sm break-words">{msg.message}</div>
              </div>
            </div>
          ))}
        </div>
      </ScrollArea>
      
      {/* Input Area */}
      <div className="bg-white border-t p-3 pb-20 md:pb-3">
        <div className="max-w-2xl mx-auto">
          <div className="flex gap-2">
            <Input
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Digite sua mensagem..."
              className="flex-1"
              data-testid="input-message"
            />
            <Button
              onClick={handleSendMessage}
              size="icon"
              className="w-10 h-10"
              disabled={!inputMessage.trim()}
              data-testid="button-send"
            >
              <Send className="w-5 h-5" />
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}